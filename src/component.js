import { v4 as uuidv4 } from 'uuid';

// components take a childData array and a children array
// childData is an array of props for children
// each prop is an object with name, payload

/*
	childData = [
		{
			name: string,
			payload: any
		},
		...
	]
*/

// rendered components are passed to the document
// by calling Component.updateIfChildDataChanged(incomingChildData)
// where incomingChildData will be an array structured like childData
// childData should be delivered by a "hook" or some sort of
// side-effect fn that runs before the component subtree is built

// note: children are already DOMFragments
// i have no idea how they end up this way
// might be jsx, might be DOMStrings getting parsed?

export class Component {
	constructor(
		childData = [],
		children = [],
		ownSubtree = <div key={uuidv4()}></div>
	) {
		this.childData = childData;
		this.children = children;
		this.ownSubtree = ownSubtree;
		this.isObserving = false;
	}

	// subscribe the children
	subscribe() {
		if (this.children.length)
			this.children.forEach(child => {
				child.isObserving = true;
			});
	}

	// this render method will allow us to pass
	// an ownSubtree to the Component instance
	// or it will default to a div wrapper
	// whose key is generated by default

	// custom Component instances that extend the Component class
	// will need to

	buildComponentSubtree() {
		this.children.forEach(child => {
			// update child props
			const newProps = this.childData.find(
				propObject => propObject.name === child.props.name
			);

			child.props = newProps;
			this.ownSubtree.appendChild(child);
		});
	}

	// this method is the hook that re-renders the component
	// whenever incomingChildData has changed
	updateIfChildDataChanged(incomingChildData) {
		// if child data hasn't changed, ignore the update
		if (
			incomingChildData.length === this.childData.length &&
			incomingChildData.every(
				(child, idx) =>
					JSON.stringify(child) === JSON.stringify(this.childData[idx])
			)
		) {
			return;
		}

		// otherwise, set child data, build the component subtree, and return it
		this.childData = incomingChildData;
		return this.buildComponentSubtree();
	}
}
